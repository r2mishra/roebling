{-# LANGUAGE NumericUnderscores #-}

module Duration where

-- Autogenerated using Claude using Prompt "Define Duration as equivalent of GoLang Time.Duration in Haskell"

import Data.Int

data Duration = Duration
  { durationNs :: Int64
  }
  deriving (Eq, Show, Ord)

-- Construct a Duration from an integer number of nanoseconds
mkDuration :: Int64 -> Duration
mkDuration ns = Duration {durationNs = ns}

-- Get the duration in nanoseconds
getNs :: Duration -> Int64
getNs (Duration ns) = ns

-- Add two Durations
addDuration :: Duration -> Duration -> Duration
addDuration d1 d2 = Duration (durationNs d1 + durationNs d2)

-- Subtract two Durations
subDuration :: Duration -> Duration -> Duration
subDuration d1 d2 = Duration (durationNs d1 - durationNs d2)

-- Multiply a Duration by an Integer
mulDuration :: Duration -> Int -> Duration
mulDuration d i = Duration (durationNs d * fromIntegral i)

-- Divide a Duration by an Integer
divDuration :: Duration -> Int -> Duration
divDuration d i = Duration (durationNs d `div` fromIntegral i)

-- Duration conversion functions
nanoseconds :: Int64 -> Duration
nanoseconds = mkDuration

microseconds :: Int64 -> Duration
microseconds us = mkDuration (us * 1000)

milliseconds :: Int64 -> Duration
milliseconds ms = mkDuration (ms * 1000_000)

seconds :: Int64 -> Duration
seconds s = mkDuration (s * 1000_000_000)

minutes :: Int64 -> Duration
minutes m = seconds (m * 60)

hours :: Int64 -> Duration
hours h = minutes (h * 60)
